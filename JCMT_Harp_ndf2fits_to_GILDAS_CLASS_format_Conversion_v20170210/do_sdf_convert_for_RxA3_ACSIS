#!/bin/bash
# 
# Aim:
#    convert JCMT HARP *.sdf to GILDAS CLASS *.fits and *.30m
# 
# Dependency:
#    starlink (JCMT)
#    class (GILDAS)
#    idl 
#    
# Last update:
#    2016-03-04 dzliu
#    2016-03-05 dzliu RA Dec done
# 

# 
# Prepare readlink 
# 
# readlink
if [[ $(uname) == *"Darwin"* ]]; then
    function readlink() {
        if [[ $# -gt 1 ]]; then if [[ "$1" == "-f" ]]; then shift; fi; fi
        DIR=$(echo "${1%/*}"); (cd "$DIR" && echo "$(pwd -P)/$(basename ${1})")
    }
fi

# 
# Check starlink
# 
if [[ "$KAPPA_DIR"x == ""x || "$SMURF_DIR"x == ""x || "$CONVERT_DIR"x == ""x ]]; then
    echo "Error! Starlink was not installed?!"
    echo "System variable \$KAPPA_DIR \$SMURF_DIR \$CONVERT_DIR invalid!"
    exit 1
fi
if [[ "$IDL_DIR"x == ""x ]]; then
    echo "Error! IDL was not installed?!"
    echo "System variable \$IDL_DIR invalid!"
    exit 1
fi

# 
# Check argument and print usage
# 
DOSDFCONVERTSCRIPTFILE=$(readlink -f $0)
DOSDFCONVERTSCRIPTDIR=$(dirname $DOSDFCONVERTSCRIPTFILE)
if [[ $# -eq 0 ]]; then
    echo "Usage: "
    echo "  $DOSDFCONVERTSCRIPTFILE -input a20151130_00034_01_0001 -output NGC2903 [-receptors 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]"
    echo ""
    exit
fi

# 
# Read arguments
# 
inputname=""
outnumb=(1)
outname=""
linename=""
linefreq="" # the expected line observing frequency in GHz
linewidth="500" # the expected line velocity width in km/s, default is 500 km/s <TODO> does not support multiple lines yet <TODO>
while [[ $# -gt 0 ]]; do
    case "$1" in
 "-inputname") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        inputname="$1"
                   else break; fi; shift
               done;;
     "-input") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        inputname="$1"
                   else break; fi; shift
               done;;
        "-in") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        inputname="$1"
                   else break; fi; shift
               done;;
"-outputname") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        outname="$1"
                   else break; fi; shift
               done;;
    "-output") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        outname="$1"
                   else break; fi; shift
               done;;
       "-out") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        outname="$1"
                   else break; fi; shift
               done;;
  "-linefreq") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        linefreq="$1"
                   else break; fi; shift
               done;;
"-linefrequency") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        linefreq="$1"
                   else break; fi; shift
               done;;
 "-linewidth") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        linewidth="$1"
                   else break; fi; shift
               done;;
    "-linename") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        linename="$1"
                   else break; fi; shift
               done;;
  "-receptor") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        outnumb=(${outnumb[@]} $1)
                   else break; fi; shift
               done;;
 "-receptors") shift
               while [[ $# -gt 0 ]]; do
                   if [[ "$1" != "-"* ]]; then
                        outnumb=(${outnumb[@]} $1)
                   else break; fi; shift
               done;;
            *) shift
    esac
done

# 
# Check arguments
# 
if [[ "$inputname"x == ""x ]]; then
    echo "Error! -input is invalid!"
    exit 1
fi
if [[ "$inputname" == *".sdf" ]]; then
    inputname="$(echo $inputname | sed -e 's%.sdf$%%g')"
fi
if [[ "$outname"x == ""x ]]; then
    outname="${inputname}_out"
fi
if [[ ${#outnumb[@]} -lt 1 ]]; then
    echo "Warning! -receptor is not given! Using 0-15!"
    outnumb=(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)
fi
if [[ "$linefreq"x == ""x ]]; then
    echo "Error! -linefreq is invalid!"
    exit 1
fi

# 
# Prepare starlink
# 
. $KAPPA_DIR/kappa.sh > /dev/null
. $SMURF_DIR/smurf.sh > /dev/null
. $CONVERT_DIR/convert.sh > /dev/null


# 
# Prepare IDL
# 
if [[ x"$IDL_PATH" == x ]]; then
    export IDL_PATH="+$(dirname $(readlink -f $0)):+$IDL_DIR/lib"
else
    export IDL_PATH="+$(dirname $(readlink -f $0)):+$IDL_PATH"
fi





# 
# Finally, start to deal with data
# 


# 
# copy input sdf to temporary sdf and set wcs attributes
# 
echo ""; echo cp "${inputname}.sdf" "${outname}_temp.sdf"; echo ""
cp "${inputname}.sdf" "${outname}_temp.sdf"
#wcsattrib "${outname}_temp.sdf" set sideband USB # (LSB) #<DONE><BUG><20160701># Should choose the right SB
if [[ -f "${outname}_temp.sdf.header.txt" ]]; then rm "${outname}_temp.sdf.header.txt"; fi
fitslist "${outname}_temp.sdf" "${outname}_temp.sdf.header.txt"
outsideband=$(grep "^OBS_SB" "${outname}_temp.sdf.header.txt" | perl -p -e "s/.*=\s*'(.*)'\s*\/.*/\1/g") # OBS_SB
wcsattrib "${outname}_temp.sdf" set sideband "$outsideband"
wcsattrib "${outname}_temp.sdf" set system freq
#ndftrace "${outname}_temp.sdf"

# 
# make receptors' catalog
# 
#mv "${outname}_receptors.fits" "backup.${outname}_receptors.fits" 2>/dev/null
makecube in="${outname}_temp" outcat="${outname}_receptors.fits" out="${outname}_receptors.sdf" # extract receptors' ra dec
rm "${outname}_receptors.sdf" 2>/dev/null

# 
# loop input receptors
for (( i=0; i<${#outnumb[@]}; i++ )); do
    
    outnumb[$i]=1 #<TODO># for RxA3-ACSIS
    
    ndfcopy "${outname}_temp(,${outnumb[$i]},)" "${outname}_receptor${outnumb[$i]}.sdf" exten
    #makecube in="${outname}_receptor${outnumb[$i]}.sdf" outcat="${outname}_receptor${outnumb[$i]}_wcs.fits" out="${outname}_receptor${outnumb[$i]}_wcs.sdf" # extract receptor's ra dec #<20160319># outcat is limited to 39 char
    rm "tmp_wcs.fits" 2>/dev/null
    makecube in="${outname}_receptor${outnumb[$i]}.sdf" outcat="tmp_wcs.fits" out="${outname}_receptor${outnumb[$i]}_wcs.sdf" # extract receptor's ra dec
    mv "tmp_wcs.fits" "${outname}_receptor${outnumb[$i]}_wcs.fits" 2>/dev/null
    rm "${outname}_receptor${outnumb[$i]}.sdf" "${outname}_receptor${outnumb[$i]}_wcs.sdf" 2>/dev/null
    
    if [[ ! -f "${outname}_receptor${outnumb[$i]}_wcs.fits" ]]; then 
        echo ""
        echo "********************************************************************************************************************************"
        echo "Warning! Failed to run \"makecube in=${outname}_receptor${outnumb[$i]}.sdf outcat=${outname}_receptor${outnumb[$i]}_wcs.fits\""
        echo "********************************************************************************************************************************"
        echo ""
        continue
    fi
    
    ndfcopy "${outname}_temp(,${outnumb[$i]},)" "${outname}_receptor${outnumb[$i]}.sdf" exten trim trimwcs # copy full freq, one receptor, all subscans
    #ndftrace "${outname}_receptor${outnumb[$i]}.sdf"
    
    if [[ ! -f "${outname}_receptor${outnumb[$i]}.sdf" ]]; then 
        echo ""
        echo "********************************************************************************************************************************"
        echo "Warning! Failed to run \"ndfcopy ${outname}_temp(,${outnumb[$i]},) ${outname}_receptor${outnumb[$i]}.sdf exten trim trimwcs\""
        echo "********************************************************************************************************************************"
        echo ""
        continue
    fi
    
    #setaxis '34.sdf' 4  expr exprs="CENTRE+(INDEX-1)"
    #wcsframe '34.sdf' sky
    
    if [[ -f "${outname}_receptor${outnumb[$i]}.fits" ]]; then
    mv "${outname}_receptor${outnumb[$i]}.fits" "backup.${outname}_receptor${outnumb[$i]}.fits" 2>/dev/null
    echo ""; echo "Backupped ${outname}_receptor${outnumb[$i]}.fits as backup.${outname}_receptor${outnumb[$i]}.fits"; echo ""
    fi
    ndf2fits "${outname}_receptor${outnumb[$i]}.sdf" "${outname}_receptor${outnumb[$i]}.fits" allowtab comp=d encoding="fits-wcs"
    #~/Softwares/ds9/CrabFitsHeader "${outname}_receptor${outnumb[$i]}.fits" > "${outname}_receptor${outnumb[$i]}.fits.header"
    
    if [[ -f "${outname}_receptor${outnumb[$i]}_class.fits" ]]; then
    mv "${outname}_receptor${outnumb[$i]}_class.fits" "backup.${outname}_receptor${outnumb[$i]}_class.fits" 2>/dev/null
    echo ""; echo "Backupped ${outname}_receptor${outnumb[$i]}_class.fits as backup.${outname}_receptor${outnumb[$i]}_class.fits"; echo ""
    fi
    idl -quiet -e "do_sdf_convert_fits" -args "${outname}_receptor${outnumb[$i]}"
    
    if [[ x"$linename" != x ]]; then
        if type sethead 2>&1 | grep -q -v "not found"; then
            sethead "${outname}_receptor${outnumb[$i]}_class.fits" LINE="$linename"
        fi
    fi
    
    if [[ -f "${outname}_receptor${outnumb[$i]}_class.30m" ]]; then
    mv "${outname}_receptor${outnumb[$i]}_class.30m" "backup.${outname}_receptor${outnumb[$i]}_class.30m" 2>/dev/null
    echo ""; echo "Backupped ${outname}_receptor${outnumb[$i]}_class.30m as backup.${outname}_receptor${outnumb[$i]}_class.30m"; echo ""
    fi
    echo "file out \"${outname}_receptor${outnumb[$i]}_class.30m\" multiple /overwrite" > "${outname}_receptor${outnumb[$i]}_class.src"
    echo "fits read \"${outname}_receptor${outnumb[$i]}_class.fits\" /mode index"      >> "${outname}_receptor${outnumb[$i]}_class.src"
    #echo "write"                                                                       >> "${outname}_receptor${outnumb[$i]}_class.src"
    #echo "fits both \"${outname}_receptor${outnumb[$i]}_class.30m\""                   >> "${outname}_receptor${outnumb[$i]}_class.src"
    #echo "set observatory JCMT -155:28:46.4 +19:49:33.8 4120"                          >> "${outname}_receptor${outnumb[$i]}_class.src"
    #echo "for i 1 to found; modify doppler *; next"                                    >> "${outname}_receptor${outnumb[$i]}_class.src"
    echo "exit"                                                                        >> "${outname}_receptor${outnumb[$i]}_class.src"
    echo class                                                                        "<" "${outname}_receptor${outnumb[$i]}_class.src" ">" "${outname}_receptor${outnumb[$i]}_class.src.log"
         class                                                                         <  "${outname}_receptor${outnumb[$i]}_class.src"  >  "${outname}_receptor${outnumb[$i]}_class.src.log"
    #echo "@${outname}_receptor${outnumb[$i]}_class.src" | class                       >  "${outname}_receptor${outnumb[$i]}_class.src.log"
    
    echo "file in \"${outname}_receptor${outnumb[$i]}_class\""                  > "${outname}_receptor${outnumb[$i]}_class.plt"
    echo "find /line HCN*"                                                     >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo "list /toc"                                                           >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo "get first"                                                           >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo "header"                                                              >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo "plot"                                                                >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo "hardcopy \"${outname}_receptor${outnumb[$i]}_class.eps\" /overwrite" >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo ""                                                                    >> "${outname}_receptor${outnumb[$i]}_class.plt"
    echo class                                                                "<" "${outname}_receptor${outnumb[$i]}_class.plt" ">" "${outname}_receptor${outnumb[$i]}_class.plt.log"
         class                                                                 <  "${outname}_receptor${outnumb[$i]}_class.plt"  >  "${outname}_receptor${outnumb[$i]}_class.plt.log"
    echo "" 
    echo "Written to CLASS data ${outname}_receptor${outnumb[$i]}_class.30m"
    echo "Created by CLASS script @${outname}_receptor${outnumb[$i]}_class.src"
    echo "Plotted by CLASS script @${outname}_receptor${outnumb[$i]}_class.plt"
    
    
done


# Also write to GILDAS CLASS do_dzliu_merge.class
if [[ -f "$DOSDFCONVERTSCRIPTDIR/gildas-class-automerge.class" && x"outname" != x ]]; then
    cat "$DOSDFCONVERTSCRIPTDIR/gildas-class-automerge.class" | \
         sed -e "s/^[!]*LET NAME .*/LET NAME ${outname}/g"  > "gildas-class-automerge.class"
    echo "Updated CLASS script @gildas-class-automerge.class!"
    echo "Running CLASS script @gildas-class-automerge.class!"
    echo "@gildas-class-automerge" | class > "log-gildas-class-automerge"
    echo "Done!"
fi


# Also write to GILDAS CLASS gildas-class-autotag.greg
if [[ -f "$DOSDFCONVERTSCRIPTDIR/gildas-class-autotag.greg" && x"outname" != x ]]; then
    cat "$DOSDFCONVERTSCRIPTDIR/gildas-class-autotag.greg" | \
         sed -e "s/^[!]*LET NAME .*/LET NAME ${outname}_receptors_class/g" | 
         sed -e "s/^[!]*LET FREQUENCY .*/LET FREQUENCY ${linefreq} ! expected line observing freuency in GHz/g" | 
         sed -e "s/^[!]*LET VELOCITY .*/LET VELOCITY ${linewidth} ! expected line velocity width in km\/s/g" > "gildas-class-autotag.greg"
    echo "Updated CLASS script @gildas-class-autotag.greg!"
    echo "Running CLASS script @gildas-class-autotag.greg!"
    echo "@gildas-class-autotag" | class > "log-gildas-class-autotag"
    echo "Done!"
fi


# Also write to GILDAS CLASS gildas-class-autoxymap.class
if [[ -f "$DOSDFCONVERTSCRIPTDIR/gildas-class-autoxymap.class" && x"outname" != x ]]; then
    cat "$DOSDFCONVERTSCRIPTDIR/gildas-class-autoxymap.class" | \
        sed -e "s/^[!]*LET NAME .*/LET NAME ${outname}_receptors_class_tagged/g" > "gildas-class-autoxymap.class"
    if [[ x"${linename}" != x ]]; then
        sed -i -e "s/^[!]*LET LINE .*/LET LINE ${linename} ! expected line name/g" "gildas-class-autoxymap.class"
    fi
    if [[ x"${linefreq}" != x ]]; then
        sed -e "s/^[!]*LET FREQUENCY .*/LET FREQUENCY ${linefreq} ! expected line observing freuency in GHz/g" "gildas-class-autoxymap.class"
    fi
    echo "Updated CLASS script @gildas-class-autoxymap.class!"
    echo "Running CLASS script @gildas-class-autoxymap.class!"
    echo "@gildas-class-autoxymap" | class > "log-gildas-class-autoxymap"
    echo "Done!"
fi


### Also write to GILDAS CLASS do_dzliu_combine.class
##if [[ -f "do_dzliu_combine.class" && x"outname" != x ]]; then
##    sed -i -e "s/^LET name .*/LET name $outname/g" "do_dzliu_combine.class"
##    echo "Updated CLASS script @do_dzliu_combine.class!"
##fi


### Also write to GILDAS CLASS do_dzliu_tag.class
##if [[ -f "do_dzliu_tag.class" && x"outname" != x ]]; then
##    sed -i -e "s/^LET name .*/LET name ${outname}_combined/g" "do_dzliu_tag.class"
##    echo "Updated CLASS script @do_dzliu_tag.class!"
##fi


# Also write to GILDAS CLASS do_dzliu_average.class
##if [[ -f "do_dzliu_average.class" && x"outname" != x ]]; then
##    sed -i -e "s/^LET name .*/LET name ${outname}_combined_tagged/g" "do_dzliu_average.class"
##    echo "Updated CLASS script @do_dzliu_average.class!"
##fi

echo ""





