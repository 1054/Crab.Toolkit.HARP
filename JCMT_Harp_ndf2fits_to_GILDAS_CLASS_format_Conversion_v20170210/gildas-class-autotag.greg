! 
! 
! Usage:
!     @gildas-class-autotag
! 
! Notes: 
!     this script will read a 30m spectra cube and inspect each spectrum one by one
!     this script will make a rough guess on the quality of each spectrum
! 
! 

! 
! User-define
! 
!LET NAME Scan_merged
!LET LINE CO(3-2)
!LET FREQUENCY (345.796/(1.0+0.005)) ! expected line observing freuency in GHz
!LET VELOCITY 300 ! expected line velocity width in km/s

! 
! Check Variables
! 
IF (.NOT.EXIST(emptystr)) DEFINE CHAR*1 emptystr
IF (NAME.EQ.emptystr) THEN
   SAY "Error! name is not defined! Please LET NAME be the data file name without suffix 30m."
   RETURN
ENDIF
IF (FREQUENCY.EQ.0) THEN
   SAY "Error! FREQUENCY is not defined! Please LET FREQUENCY be the expected line observing frequency in GHz."
   RETURN
ENDIF
IF (VELOCITY.EQ.0) THEN
   SAY "Error! VELOCITY is not defined! Please LET VELOCITY be the expected line velocity width in km/s."
   RETURN
ENDIF

! 
! Auto-define
! 
IF (.NOT.EXIST(filename)) DEFINE CHAR*256 filename /GLOBAL
IF (.NOT.EXIST(linename)) DEFINE CHAR*256 linename /GLOBAL
IF (.NOT.EXIST(linefreq)) DEFINE DOUBLE linefreq /GLOBAL
IF (.NOT.EXIST(linewidth)) DEFINE DOUBLE linewidth /GLOBAL
IF (.NOT.EXIST(autotagsmooth)) DEFINE DOUBLE autotagsmooth
IF (.NOT.EXIST(autotagmedian)) DEFINE DOUBLE autotagmedian
IF (.NOT.EXIST(autotagmean))   DEFINE DOUBLE autotagmean
IF (.NOT.EXIST(autotagmin))    DEFINE DOUBLE autotagmin
IF (.NOT.EXIST(autotagmax))    DEFINE DOUBLE autotagmax
IF (.NOT.EXIST(autotagrms))    DEFINE DOUBLE autotagrms
IF (.NOT.EXIST(autotagtmp))    DEFINE DOUBLE autotagtmp
IF (.NOT.EXIST(autoFlagEdgeChanLeft))  DEFINE DOUBLE autoFlagEdgeChanLeft
IF (.NOT.EXIST(autoFlagEdgeChanRight)) DEFINE DOUBLE autoFlagEdgeChanRight
LET filename 'NAME'
LET linename 'LINE'
LET linefreq FREQUENCY    ! line center in GHz
LET linewidth 'VELOCITY/2.99792458e5*linefreq' ! line width in GHz
LET autotagsmooth 0     ! the smooth level, higher number means more smoothing <TODO> currently disabled
LET autotagmedian 0.10  ! the median value which corresponds to quality 4 <TODO> currently obsoleted
LET autoFlagEdgeChanLeft 30 ! GHz
LET autoFlagEdgeChanRight 30 ! GHz


! 
! FILE IN 'name' FILE OUT 'name'_tagging
! 
file out 'name'_tagging multiple /overwrite
file in 'name'
find 


! 
! Check Variables
! 
IF (.NOT.EXIST(autotagVALUE)) THEN
    DEFINE DOUBLE autotagVALUE[found]
ENDIF
IF (.NOT.EXIST(autotagNOISE)) THEN
    DEFINE DOUBLE autotagNOISE[found]
ENDIF
IF (.NOT.EXIST(autotagRSPEC)) THEN
    DEFINE STRUCTURE autotagRSPEC
    DEFINE INTEGER autotagRSPEC%NCHAN
    DEFINE DOUBLE autotagRSPEC%RCHAN
    DEFINE DOUBLE autotagRSPEC%RESTF
    DEFINE DOUBLE autotagRSPEC%FOFF
    DEFINE DOUBLE autotagRSPEC%FRES
    DEFINE DOUBLE autotagRSPEC%VOFF
    DEFINE DOUBLE autotagRSPEC%VRES
ENDIF
IF (.NOT.EXIST(autotagWINDOW)) THEN
    DEFINE DOUBLE autotagWINDOW[6] ! define the velocity range window outside of which the baseline are computed
ENDIF


! 
! Prepare to write rms to 'name'_tagging.rms.txt
! 
SIC OUTPUT 'name'_tagging.rms.txt NEW

SIC\SYSTEM "bash -c 'if [[ ! -d check_spectra ]]; then mkdir check_spectra; fi'"


! 
! LOOP to smooth all spectra and resample to the same frequency axis and remove baseline
! 
FOR i 1 TO found
    
    set unit F ! Frequency
    set plot H ! Histogram
    
    get i ! pl
    
    ! 
    ! kill bad channels at the edges
    ! 
    !for j 1 TO 66 'R%HEAD%SPE%NCHAN-65' TO 'R%HEAD%SPE%NCHAN' 
    !    draw kill j
    !next
    
    ! 
    ! write Version 1 (original version)
    ! 
    !write
    
    ! 
    ! remove baseline and compute rms and write new version
    ! 
    @gildas-class-remove-baseline
    write
    
    ! 
    ! smooth multiple times according to the 'autotagsmooth' number
    ! 
    FOR j 1 TO autotagsmooth
        smooth box 5
        resample 'autotagRSPEC%NCHAN' 'autotagRSPEC%RCHAN' 'autotagRSPEC%RESTF' 'autotagRSPEC%FRES' FREQUENCY
        @gildas-class-remove-baseline
        write
    NEXT
    
    ! 
    ! Store rms into data array, and output to SIC OUTPUT
    ! 
    let autotagVALUE[i] = R%HEAD%BAS%SIGFI
    let autotagNOISE[i] = R%HEAD%BAS%SIGFI
    say "rms" 'autotagNOISE[i]' "window" 'R%HEAD%BAS%W1[1]' 'R%HEAD%BAS%W2[1]' 'R%HEAD%BAS%W1[2]' 'R%HEAD%BAS%W2[2]' 'R%HEAD%BAS%W1[3]' 'R%HEAD%BAS%W2[3]'
    
    ! 
    ! Plot screenshots/checkplots (plot 200 checkplots)
    ! 
    IF ((((i*1.0/int(found/200))-int(i*1.0/int(found/200))).EQ.0).OR.(i.EQ.1).OR.(i.EQ.found)) THEN
        hardcopy checkplot_'name'_tagging_'i'.eps /overwrite
        SIC\SYSTEM "ps2pdf -dEPSCrop checkplot_"'name'"_tagging_"'i'".eps check_spectra/checkplot_"'name'"_tagging_"'i'".pdf"
        SIC\SYSTEM "rm checkplot_"'name'"_tagging_"'i'".eps"
    ENDIF
    
NEXT

SIC OUTPUT


! 
! Compute the statistics of autotagNOISE
! 
COMPUTE autotagrms    RMS    autotagNOISE
COMPUTE autotagmean   MEAN   autotagNOISE
COMPUTE autotagmedian MEDIAN autotagNOISE
COMPUTE autotagmin    MIN    autotagNOISE
COMPUTE autotagmax    MAX    autotagNOISE

SIC OUTPUT 'name'_tagging.sum.txt NEW
SAY "autotag RMS    "'autotagrms'
SAY "autotag MEAN   "'autotagmean'
SAY "autotag MEDIAN "'autotagmedian'
SAY "autotag MIN    "'autotagmin'
SAY "autotag MAX    "'autotagmax'
SIC OUTPUT


! 
! Tag each spectrum and save into tagged.30m
! 
file in 'name'_tagging
file out 'name'_tagged single /overwrite
find /LINE 'linename'

FOR i 1 TO found
    
    IF (i.EQ.1) THEN 
        get f
    ELSE 
        get n
    ENDIF
    
    ! 
    ! tag the quality <20160701> by rms noise distribution
    ! 
    IF      (autotagNOISE[i].LT.(autotagmean-3*autotagrms)) THEN
        tag 1
    ELSE IF (autotagNOISE[i].LT.(autotagmean-2*autotagrms)) THEN
        tag 1
    ELSE IF (autotagNOISE[i].LT.(autotagmean-1*autotagrms)) THEN
        tag 2
    ELSE IF (autotagNOISE[i].LT.(autotagmean+0*autotagrms)) THEN
        tag 3
    ELSE IF (autotagNOISE[i].LT.(autotagmean+1*autotagrms)) THEN
        tag 4
    ELSE IF (autotagNOISE[i].LT.(autotagmean+2*autotagrms)) THEN
        tag 5
    ELSE IF (autotagNOISE[i].LT.(autotagmean+3*autotagrms)) THEN
        tag 6
    ELSE IF (autotagNOISE[i].LT.(autotagmean+4*autotagrms)) THEN
        tag 7
    ELSE
        tag 8
    ENDIF
    
    write
    
    !set mode y auto
    !set mode x auto
    
NEXT


! 
! Write output averaged file
! 
!file in 'name'_tagged
!file out 'name'_tagged_averaged_quality_6 single /overwrite
!find /quality 6
!consistency
!average
















