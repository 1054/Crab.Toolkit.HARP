! 
! 
! Usage:
!     @gildas-class-autotag
! 
! Notes: 
!     this script will read a 30m spectra cube and inspect each spectrum one by one
!     this script will make a rough guess on the quality of each spectrum
! 
! 

! 
! User-define
! 
!LET NAME Scan_merged
!LET FREQUENCY (345.796/(1.0+0.005)) ! expected line observing freuency in GHz
!LET VELOCITY 300 ! expected line velocity width in km/s

! 
! Check Variables
! 
IF (.NOT.EXIST(emptystr)) DEFINE CHAR*1 emptystr
IF (NAME.EQ.emptystr) THEN
   SAY "Error! name is not defined! Please LET NAME be the data file name without suffix 30m."
   RETURN
ENDIF
IF (FREQUENCY.EQ.0) THEN
   SAY "Error! FREQUENCY is not defined! Please LET FREQUENCY be the expected line observing frequency in GHz."
   RETURN
ENDIF
IF (VELOCITY.EQ.0) THEN
   SAY "Error! VELOCITY is not defined! Please LET VELOCITY be the expected line velocity width in km/s."
   RETURN
ENDIF

! 
! Auto-define
! 
IF (.NOT.EXIST(filename)) DEFINE CHAR*256 filename /GLOBAL
IF (.NOT.EXIST(linefreq)) DEFINE DOUBLE linefreq /GLOBAL
IF (.NOT.EXIST(linewidth)) DEFINE DOUBLE linewidth /GLOBAL
IF (.NOT.EXIST(autotagsmooth)) DEFINE DOUBLE autotagsmooth
IF (.NOT.EXIST(autotagmedian)) DEFINE DOUBLE autotagmedian
IF (.NOT.EXIST(autotagmean))   DEFINE DOUBLE autotagmean
IF (.NOT.EXIST(autotagmin))    DEFINE DOUBLE autotagmin
IF (.NOT.EXIST(autotagmax))    DEFINE DOUBLE autotagmax
IF (.NOT.EXIST(autotagrms))    DEFINE DOUBLE autotagrms
IF (.NOT.EXIST(autotagtmp))    DEFINE DOUBLE autotagtmp
IF (.NOT.EXIST(autoFlagEdgeChanLeft))  DEFINE DOUBLE autoFlagEdgeChanLeft
IF (.NOT.EXIST(autoFlagEdgeChanRight)) DEFINE DOUBLE autoFlagEdgeChanRight
LET filename name
LET linefreq FREQUENCY    ! line center in GHz
LET linewidth 'VELOCITY/2.99792458e5*linefreq' ! line width in GHz
LET autotagsmooth 0     ! the smooth level, higher number means more smoothing <TODO> currently disabled
LET autotagmedian 0.10  ! the median value which corresponds to quality 4 <TODO> currently obsoleted
LET autoFlagEdgeChanLeft 35 ! GHz
LET autoFlagEdgeChanRight 35 ! GHz


! 
! FILE IN 'name' FILE OUT 'name'_tagging
! 
file out 'name'_tagging multiple /overwrite
file in 'name'
find 


! 
! Check Variables
! 
IF (.NOT.EXIST(autotagVALUE)) THEN
    DEFINE DOUBLE autotagVALUE[found]
ENDIF
IF (.NOT.EXIST(autotagNOISE)) THEN
    DEFINE DOUBLE autotagNOISE[found]
ENDIF
IF (.NOT.EXIST(autotagRSPEC)) THEN
    DEFINE STRUCTURE autotagRSPEC
    DEFINE INTEGER autotagRSPEC%NCHAN
    DEFINE DOUBLE autotagRSPEC%RCHAN
    DEFINE DOUBLE autotagRSPEC%RESTF
    DEFINE DOUBLE autotagRSPEC%FOFF
    DEFINE DOUBLE autotagRSPEC%FRES
    DEFINE DOUBLE autotagRSPEC%VOFF
    DEFINE DOUBLE autotagRSPEC%VRES
ENDIF
IF (.NOT.EXIST(autotagWINDOW)) THEN
    DEFINE DOUBLE autotagWINDOW[6] ! define the velocity range window outside of which the baseline are computed
ENDIF


! 
! Prepare to write rms to 'name'_tagging.rms.txt
! 
SIC OUTPUT 'name'_tagging.rms.txt NEW


! 
! LOOP to smooth all spectra and resample to the same frequency axis and remove baseline
! 
FOR i 1 TO found
    
    set unit F ! Frequency
    set plot H ! Histogram
    
    get i; pl
    
    ! 
    ! kill bad channels at the edges
    ! 
    !for j 1 TO 66 'R%HEAD%SPE%NCHAN-65' TO 'R%HEAD%SPE%NCHAN' 
    !    draw kill j
    !next
    
    ! 
    ! write Version 1
    ! 
    write
    
    ! 
    ! remove baseline and compute rms
    ! 
    @gildas-class-remove-baseline
    
    ! 
    ! write Version 2
    ! 
    write
    
    ! 
    ! smooth multiple times according to the 'autotagsmooth' number
    ! 
    FOR j 1 TO autotagsmooth
        smooth box 5
        resample 'autotagRSPEC%NCHAN' 'autotagRSPEC%RCHAN' 'autotagRSPEC%RESTF' 'autotagRSPEC%FRES' FREQUENCY
        @gildas-class-remove-baseline
        write
    NEXT
    
    ! 
    ! Plot screenshots/checkplots (plot 20 checkplots)
    ! 
    IF ((((i*1.0/int(found/20))-int(i*1.0/int(found/20))).EQ.0).OR.(i.EQ.1).OR.(i.EQ.found)) THEN
        hardcopy checkplot_'name'_tagging_'i'.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop checkplot_"'name'"_tagging_"'i'".eps"
    ENDIF
    
NEXT

! 
! Read each spectrum and compute noise by setting a line window
! 
FOR i 1 TO found
    
    set unit F ! Frequency
    set plot H ! Histogram
    
    !set mode x 352400 353600
    !set mode y -3 3
    
    !get i 2; pl; hardcopy hdcp_'i'_sm2.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop hdcp_"'i'"_sm2.eps"
    !get i 3; pl; hardcopy hdcp_'i'_sm3.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop hdcp_"'i'"_sm3.eps"
    !get i 4; pl; hardcopy hdcp_'i'_sm4.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop hdcp_"'i'"_sm4.eps"
    !get i 5; pl; hardcopy hdcp_'i'_sm5.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop hdcp_"'i'"_sm5.eps"
    !get i 6; pl; hardcopy hdcp_'i'_sm6.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop hdcp_"'i'"_sm6.eps"
    
    get i; pl
    
    let autotagRSPEC%NCHAN 'R%HEAD%SPE%NCHAN'
    let autotagRSPEC%RCHAN 'R%HEAD%SPE%RCHAN'
    let autotagRSPEC%FRES  'R%HEAD%SPE%FRES'
    let autotagRSPEC%VRES  'R%HEAD%SPE%VRES'
    let autotagRSPEC%RESTF 'R%HEAD%SPE%RESTF'
    !<fixed><20170327><dzliu>; let autotagRSPEC%FOFF 'R%HEAD%SPE%FOFF'
    IF (EXIST(R%HEAD%SPE%FOFF)) THEN
        let autotagRSPEC%FOFF 'R%HEAD%SPE%FOFF'
    ELSE
        let autotagRSPEC%FOFF 0.0
    ENDIF
    IF (EXIST(R%HEAD%SPE%VOFF)) THEN
        let autotagRSPEC%VOFF 'R%HEAD%SPE%VOFF'
    ELSE
        let autotagRSPEC%VOFF 0.0
    ENDIF
    
    !<Note> set window only accepts velocity, and needs to set unit V then set unit F back
    set unit V
    !<modified><20170327><dzliu>; say window '(-R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(-R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2+autoFlagEdgeChanRight)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(+R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2-autoFlagEdgeChanLeft)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(+R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(linefreq*1e3-linewidth/2*1e3-R%HEAD%SPE%RESTF-R%HEAD%SPE%FOFF)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(linefreq*1e3+linewidth/2*1e3-R%HEAD%SPE%RESTF-R%HEAD%SPE%FOFF)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF'
    !<modified><20170327><dzliu>; set window '(-R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(-R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2+autoFlagEdgeChanRight)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(+R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2-autoFlagEdgeChanLeft)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(+R%HEAD%SPE%NCHAN*abs(R%HEAD%SPE%FRES)/2)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(linefreq*1e3-linewidth/2*1e3-R%HEAD%SPE%RESTF-R%HEAD%SPE%FOFF)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF' '(linefreq*1e3+linewidth/2*1e3-R%HEAD%SPE%RESTF-R%HEAD%SPE%FOFF)/abs(R%HEAD%SPE%FRES)*abs(R%HEAD%SPE%VRES)+R%HEAD%SPE%VOFF'
    let autotagWINDOW[1] '(-autotagRSPEC%NCHAN*abs(autotagRSPEC%FRES)/2                      )/abs(autotagRSPEC%FRES)*abs(autotagRSPEC%VRES)+autotagRSPEC%VOFF'
    let autotagWINDOW[2] '(-autotagRSPEC%NCHAN*abs(autotagRSPEC%FRES)/2+autoFlagEdgeChanRight)/abs(autotagRSPEC%FRES)*abs(autotagRSPEC%VRES)+autotagRSPEC%VOFF'
    let autotagWINDOW[3] '(+autotagRSPEC%NCHAN*abs(autotagRSPEC%FRES)/2-autoFlagEdgeChanLeft )/abs(autotagRSPEC%FRES)*abs(autotagRSPEC%VRES)+autotagRSPEC%VOFF'
    let autotagWINDOW[4] '(+autotagRSPEC%NCHAN*abs(autotagRSPEC%FRES)/2                      )/abs(autotagRSPEC%FRES)*abs(autotagRSPEC%VRES)+autotagRSPEC%VOFF'
    let autotagWINDOW[5] '(linefreq*1e3-linewidth/2*1e3-autotagRSPEC%RESTF-autotagRSPEC%FOFF )/abs(autotagRSPEC%FRES)*abs(autotagRSPEC%VRES)+autotagRSPEC%VOFF'
    let autotagWINDOW[6] '(linefreq*1e3+linewidth/2*1e3-autotagRSPEC%RESTF-autotagRSPEC%FOFF )/abs(autotagRSPEC%FRES)*abs(autotagRSPEC%VRES)+autotagRSPEC%VOFF'
    say window 'autotagWINDOW[1]' 'autotagWINDOW[2]' 'autotagWINDOW[3]' 'autotagWINDOW[4]' 'autotagWINDOW[5]' 'autotagWINDOW[6]'
    set window 'autotagWINDOW[1]' 'autotagWINDOW[2]' 'autotagWINDOW[3]' 'autotagWINDOW[4]' 'autotagWINDOW[5]' 'autotagWINDOW[6]'
    
    !<Note> plot with frequency axis
    set unit F
    draw window
    base /continuum /pl ! /continuum 
    let autotagVALUE[i] = R%HEAD%BAS%SIGFI
    let autotagNOISE[i] = R%HEAD%BAS%SIGFI
    
    get i; pl
    base last /pl
    draw window
    draw text 15 3 "rms="'autotagNOISE[i]'
    
    say "rms" 'autotagNOISE[i]' "window" 'R%HEAD%BAS%W1[1]' 'R%HEAD%BAS%W1[2]'
    
    write
    
    ! Plot intermediate screens (plot 20 checkplots)
    IF ((((i*1.0/int(found/20))-int(i*1.0/int(found/20))).EQ.0).OR.(i.EQ.1).OR.(i.EQ.found)) THEN
        hardcopy checkplot_'name'_tagging_'i'.eps /overwrite; SIC\SYSTEM "ps2pdf -dEPSCrop checkplot_"'name'"_tagging_"'i'".eps"
    ENDIF
    
NEXT

SIC OUTPUT

! 
! Compute the statistics of autotagNOISE
! 
COMPUTE autotagrms    RMS    autotagNOISE
COMPUTE autotagmean   MEAN   autotagNOISE
COMPUTE autotagmedian MEDIAN autotagNOISE
COMPUTE autotagmin    MIN    autotagNOISE
COMPUTE autotagmax    MAX    autotagNOISE
SAY "autotag RMS    'autotagrms'"
SAY "autotag MEAN   'autotagmean'"
SAY "autotag MEDIAN 'autotagmedian'"
SAY "autotag MIN    'autotagmin'"
SAY "autotag MAX    'autotagmax'"



! 
! Prepare output tagged file
! 
SIC COPY 'name'.30m 'name'_tagged.30m
file update 'name'_tagged
find 


! 
! Write output tagged file
! 
FOR i 1 TO found
    
    get i
    
    ! kill bad channels at the edges
    !!for j 1 TO 66 'R%HEAD%SPE%NCHAN-65' TO 'R%HEAD%SPE%NCHAN' 
    !!    draw kill j
    !!next
    
    ! tag the quality
    !!IF ((int(autotagVALUE[i]/autotagmedian*4.0)).LT.8) THEN
    !!    tag 'int(autotagVALUE[i]/autotagmedian*4.0)'
    !!ELSE
    !!    tag 8
    !!ENDIF
    
    ! 
    ! tag the quality <20160701> by rms noise distribution
    ! 
    IF      (autotagNOISE[i].LT.(autotagmean-3*autotagrms)) THEN
        tag 1
    ELSE IF (autotagNOISE[i].LT.(autotagmean-2*autotagrms)) THEN
        tag 1
    ELSE IF (autotagNOISE[i].LT.(autotagmean-1*autotagrms)) THEN
        tag 2
    ELSE IF (autotagNOISE[i].LT.(autotagmean+0*autotagrms)) THEN
        tag 3
    ELSE IF (autotagNOISE[i].LT.(autotagmean+1*autotagrms)) THEN
        tag 4
    ELSE IF (autotagNOISE[i].LT.(autotagmean+2*autotagrms)) THEN
        tag 5
    ELSE IF (autotagNOISE[i].LT.(autotagmean+3*autotagrms)) THEN
        tag 6
    ELSE IF (autotagNOISE[i].LT.(autotagmean+4*autotagrms)) THEN
        tag 7
    ELSE
        tag 8
    ENDIF
    
    update
    
    set mode y auto
    set mode x auto
    
NEXT


! 
! Write output averaged file
! 
file in 'name'_tagged
file out 'name'_tagged_averaged_quality_6 single /overwrite
find /quality 6
!consistency
!average



!file in 'name'_tagged
!file out 'name'_tagged_averaged_quality_4 single /overwrite
!find /quality 4
















