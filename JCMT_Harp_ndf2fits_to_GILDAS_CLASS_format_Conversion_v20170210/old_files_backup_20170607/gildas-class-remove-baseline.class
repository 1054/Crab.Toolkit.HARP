! 
! 
! Usage:
!     @gildas-class-remove-baseline
! 
! Notes: 
!     this script will remove the base for the spectrum in memory
! 
! 

! 
! User-define
! 
! <Note> needs already FILE IN and FIND and GET i

! 
! Check Variables
! 
IF (.NOT.EXIST(linefreq)) THEN
    DEFINE DOUBLE linefreq /GLOBAL
    LET linefreq 0
ENDIF
IF (.NOT.EXIST(linewidth)) THEN
    DEFINE DOUBLE linewidth /GLOBAL
    LET linewidth 300
ENDIF
IF (linewidth.LE.0) THEN
    MESSAGE I "rmbase" "Warning! The input linewidth is non-positive! Set to the default value of 300 km/s!"
    LET linewidth 300
ENDIF

! 
! Auto-define
! 
IF (.NOT.EXIST(rmbasemean))      DEFINE DOUBLE rmbasemean       /GLOBAL
IF (.NOT.EXIST(rmbasemin))       DEFINE DOUBLE rmbasemin        /GLOBAL
IF (.NOT.EXIST(rmbasemax))       DEFINE DOUBLE rmbasemax        /GLOBAL
IF (.NOT.EXIST(rmbaserms))       DEFINE DOUBLE rmbaserms        /GLOBAL
IF (.NOT.EXIST(rmbasemaskleft))  DEFINE DOUBLE rmbasemaskleft   /GLOBAL
IF (.NOT.EXIST(rmbasemaskright)) DEFINE DOUBLE rmbasemaskright  /GLOBAL
LET rmbasemaskleft 30                                           ! GHz
LET rmbasemaskright 30                                          ! GHz

! 
! Check Variables
! 
IF (.NOT.EXIST(rmbasespec)) THEN
    DEFINE STRUCTURE rmbasespec     /GLOBAL
    DEFINE INTEGER rmbasespec%NCHAN /GLOBAL
    DEFINE DOUBLE rmbasespec%RCHAN  /GLOBAL
    DEFINE DOUBLE rmbasespec%RESTF  /GLOBAL
    DEFINE DOUBLE rmbasespec%FOFF   /GLOBAL
    DEFINE DOUBLE rmbasespec%FRES   /GLOBAL
    DEFINE DOUBLE rmbasespec%VOFF   /GLOBAL
    DEFINE DOUBLE rmbasespec%VRES   /GLOBAL
ENDIF
IF (.NOT.EXIST(rmbasewindow)) THEN
    DEFINE DOUBLE rmbasewindow[6] /GLOBAL ! define the velocity range window outside of which the baseline are computed
ENDIF


! 
! Go
! 
    
    set unit F V ! Frequency, Velocity
    set plot H ! Histogram
    
    set viewport 0.2 0.9 0.2 0.6
    box ! p o i p /unit v upper
    plot
    
    ! 
    ! kill bad channels at the edges
    ! 
    !for j 1 TO 66 'R%HEAD%SPE%NCHAN-65' TO 'R%HEAD%SPE%NCHAN' 
    !    draw kill j
    !next
    
    ! 
    ! check variables
    ! 
    let rmbasespec%NCHAN 'R%HEAD%SPE%NCHAN'
    let rmbasespec%RCHAN 'R%HEAD%SPE%RCHAN'
    let rmbasespec%FRES  'R%HEAD%SPE%FRES'
    let rmbasespec%VRES  'R%HEAD%SPE%VRES'
    IF (R%HEAD%SPE%RESTF.GE.10e3) THEN
        let rmbasespec%RESTF 'R%HEAD%SPE%RESTF'
    ELSE
        let rmbasespec%RESTF 'R%HEAD%SPE%RESTF*1e3' ! make sure it is MHz
    ENDIF
    IF (EXIST(R%HEAD%SPE%FOFF)) THEN
        let rmbasespec%FOFF 'R%HEAD%SPE%FOFF'
    ELSE
        let rmbasespec%FOFF 0.0
    ENDIF
    IF (EXIST(R%HEAD%SPE%VOFF)) THEN
        let rmbasespec%VOFF 'R%HEAD%SPE%VOFF'
    ELSE
        let rmbasespec%VOFF 0.0
    ENDIF
    
    ! 
    ! remove baseline
    ! <Note> set window only accepts velocity, and needs to set unit V then set unit F back
    ! 
    set unit V
    let rmbasewindow[1] '(-rmbasespec%NCHAN*abs(rmbasespec%FRES)/2                      )/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    let rmbasewindow[2] '(-rmbasespec%NCHAN*abs(rmbasespec%FRES)/2+rmbasemaskright      )/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    let rmbasewindow[3] '(+rmbasespec%NCHAN*abs(rmbasespec%FRES)/2-rmbasemaskleft       )/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    let rmbasewindow[4] '(+rmbasespec%NCHAN*abs(rmbasespec%FRES)/2                      )/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    IF (linefreq.GT.0) THEN
    let rmbasewindow[5] '(linefreq*1e3-linewidth/2.99792458e5*linefreq*1e3/2-rmbasespec%RESTF-rmbasespec%FOFF)/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    let rmbasewindow[6] '(linefreq*1e3+linewidth/2.99792458e5*linefreq*1e3/2-rmbasespec%RESTF-rmbasespec%FOFF)/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    ELSE
    let rmbasewindow[5] '(rmbasespec%RESTF-linewidth/2.99792458e5*rmbasespec%RESTF/2-rmbasespec%RESTF-rmbasespec%FOFF)/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    let rmbasewindow[6] '(rmbasespec%RESTF+linewidth/2.99792458e5*rmbasespec%RESTF/2-rmbasespec%RESTF-rmbasespec%FOFF)/abs(rmbasespec%FRES)*abs(rmbasespec%VRES)+rmbasespec%VOFF'
    ENDIF
    MESSAGE I "rmbase" window 'rmbasewindow[1]' 'rmbasewindow[2]' 'rmbasewindow[3]' 'rmbasewindow[4]' 'rmbasewindow[5]' 'rmbasewindow[6]'
    set window 'rmbasewindow[1]' 'rmbasewindow[2]' 'rmbasewindow[3]' 'rmbasewindow[4]' 'rmbasewindow[5]' 'rmbasewindow[6]'
    set unit F
    pen /colour BLUE /weight 5
    draw window
    pen /colour RED /weight 5
    base /pl ! /continuum
    pen /default
    
    
    let rmbaserms = R%HEAD%BAS%SIGFI
    IF (EXIST(autotagNOISE)) THEN
        LET autotagNOISE[i] = R%HEAD%BAS%SIGFI
    ENDIF
    
    !get i; pl
    swap
    plot
    base last /pl
    pen /colour BLUE /weight 5
    draw window
    pen /colour RED /weight 3
    draw text 12.5 5.5 "\gs="'rmbaserms'" K"
    pen /default
    MESSAGE I "rmbase" "rms "'rmbaserms'", window "'nint(rmbasewindow[1]*10)/10'" "'nint(rmbasewindow[2]*10)/10'" | "'nint(rmbasewindow[3]*10)/10'" "'nint(rmbasewindow[4]*10)/10'" | "'nint(rmbasewindow[5]*10)/10'" "'nint(rmbasewindow[6]*10)/10' ! " | "'R%HEAD%BAS%W1[1]'" "'R%HEAD%BAS%W1[2]'
    





